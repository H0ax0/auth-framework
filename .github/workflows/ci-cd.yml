# GitHub Actions CI/CD Pipeline for AuthFramework v0.4.0

name: AuthFramework CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: auth_framework_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libssl-dev pkg-config

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/auth_framework_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_that_is_longer_than_32_characters_for_security
        run: cargo test --all-features --workspace

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/auth_framework_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_that_is_longer_than_32_characters_for_security
        run: cargo test --test integration_tests --all-features

      - name: Run benchmarks
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/auth_framework_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_that_is_longer_than_32_characters_for_security
        run: cargo bench --no-run

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: stable

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run cargo-deny security audit
        run: cargo deny check

      - name: Clear cargo advisory cache (if exists)
        run: rm -rf ~/.cargo/advisory-db || true
        continue-on-error: true

  build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Build test image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v5.4.0
        with:
          context: .
          file: ./Dockerfile.optimized
          target: testing
          push: false
          tags: authframework:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Docker tests
        run: |
          docker run --rm authframework:test

      - name: Build production image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v5.4.0
        with:
          context: .
          file: ./Dockerfile.optimized
          target: runtime
          push: false
          tags: authframework:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: auth_framework_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: stable

      - name: Cache cargo registry
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libssl-dev pkg-config

      - name: Run performance benchmarks
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/auth_framework_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_that_is_longer_than_32_characters_for_security
        run: |
          cargo bench --bench auth_performance 2>&1 | tee benchmark_results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: benchmark-results
          path: benchmark_results.txt

      - name: Performance regression check
        run: |
          # Check if any benchmark shows >10% performance degradation
          if grep -q "change:.*-[1-9][0-9]\%" benchmark_results.txt; then
            echo "Performance regression detected!"
            exit 1
          fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: authframework
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.optimized --target runtime -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to staging
        run: |
          # Update ECS service or Kubernetes deployment
          aws ecs update-service --cluster staging --service authframework --force-new-deployment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Note: Requires AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets to be configured in repository settings
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: authframework
          IMAGE_TAG: ${{ steps.version.outputs.VERSION }}
        run: |
          docker build -f Dockerfile.optimized --target runtime -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -f Dockerfile.optimized --target runtime -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to production
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
        run: |
          # Blue-green deployment with rollback capability
          aws ecs update-service --cluster production --service authframework --task-definition authframework:$VERSION

      - name: Run smoke tests
        run: |
          # Wait for deployment to complete
          sleep 60

          # Run smoke tests against production
          curl -f https://api.authframework.com/health || exit 1

          # Test authentication flow
          curl -f -X POST https://api.authframework.com/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"test@example.com","password":"test"}' || exit 1

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      # Note: Requires SLACK_WEBHOOK_URL secret to be configured in repository settings
      - name: Slack notification
        uses: rtCamp/action-slack-notify@4e5fb42d249be6a45a298f3c9543b111b02f7907 # v2.3.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: "deployments"
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || job.status == 'failure' && 'danger' || 'warning' }}
          SLACK_MESSAGE: "Deployment status: ${{ job.status }}"
          SLACK_TITLE: "AuthFramework CI/CD Pipeline"
          SLACK_USERNAME: "GitHub Actions"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Clean up old artifacts
        run: |
          # Cleanup old Docker images, test artifacts, etc.
          echo "Cleanup completed"
