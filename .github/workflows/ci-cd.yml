# GitHub Actions CI/CD Pipeline for AuthFramework v0.4.0

name: AuthFramework CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: auth_framework_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4-latest
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target/release/deps
            target/debug/deps
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-

      - name: Free up disk space
        run: |
          echo "Disk usage before cleanup:"
          df -h
          
          # Remove unnecessary packages and clean package cache
          sudo apt-get autoremove -y
          sudo apt-get autoclean
          sudo apt-get clean
          
          # Remove large unnecessary directories
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          
          echo "Disk usage after cleanup:"
          df -h

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libssl-dev pkg-config

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/auth_framework_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_that_is_longer_than_32_characters_for_security
          CARGO_INCREMENTAL: 0
          CARGO_NET_RETRY: 10
        run: cargo test --all-features --workspace

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/auth_framework_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_that_is_longer_than_32_characters_for_security
        run: cargo test --test integration_tests --all-features

      - name: Run benchmarks
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/auth_framework_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_that_is_longer_than_32_characters_for_security
        run: cargo bench --no-run

      - name: Clean up build artifacts
        run: |
          # Remove large binary files but keep dependencies cache
          find target -name "*.rlib" -delete
          find target -name "auth-framework*" -type f -executable -delete
          find target -name "integration_tests*" -type f -executable -delete
          echo "Remaining disk usage:"
          df -h

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: stable

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run cargo-deny security audit
        run: cargo deny check

      - name: Clear cargo advisory cache (if exists)
        run: rm -rf ~/.cargo/advisory-db || true
        continue-on-error: true

  build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Build test image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v5.4.0
        with:
          context: .
          file: ./Dockerfile.optimized
          target: testing
          push: false
          tags: authframework:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Docker tests
        run: |
          docker run --rm authframework:test

      - name: Build production image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v5.4.0
        with:
          context: .
          file: ./Dockerfile.optimized
          target: runtime
          push: false
          tags: authframework:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: auth_framework_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: stable

      - name: Cache cargo registry
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4-latest
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libssl-dev pkg-config

      - name: Run performance benchmarks
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/auth_framework_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_that_is_longer_than_32_characters_for_security
        run: |
          cargo bench --bench auth_performance 2>&1 | tee benchmark_results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: benchmark-results
          path: benchmark_results.txt

      - name: Performance regression check
        run: |
          # Check if any benchmark shows >10% performance degradation
          if grep -q "change:.*-[1-9][0-9]\%" benchmark_results.txt; then
            echo "Performance regression detected!"
            exit 1
          fi

  publish-crates-io:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: stable

      - name: Cache cargo registry
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4-latest
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libssl-dev pkg-config

      - name: Verify version matches release tag
        run: |
          CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch: Cargo.toml version ($CARGO_VERSION) != tag version ($TAG_VERSION)"
            exit 1
          fi

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish --dry-run && cargo publish

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [publish-crates-io]
    if: always()

    steps:
      # Note: Requires SLACK_WEBHOOK_URL secret to be configured in repository settings
      - name: Slack notification
        uses: rtCamp/action-slack-notify@4e5fb42d249be6a45a298f3c9543b111b02f7907 # v2.3.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: "releases"
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || job.status == 'failure' && 'danger' || 'warning' }}
          SLACK_MESSAGE: "Library publication status: ${{ job.status }}"
          SLACK_TITLE: "AuthFramework Library Release"
          SLACK_USERNAME: "GitHub Actions"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Clean up old artifacts
        run: |
          # Cleanup old Docker images, test artifacts, etc.
          echo "Cleanup completed"
