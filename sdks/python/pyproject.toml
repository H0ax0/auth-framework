[build-system]
  build-backend = "hatchling.build"
  requires      = ["hatchling"]

[project]
  authors = [
    { name = "AuthFramework Team", email = "support@authframework.dev" },
  ]
  classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration :: Authentication/Directory",
  ]
  dependencies = [
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.5.0; python_version<'3.12'",
  ]
  description = "Official Python SDK for AuthFramework REST API"
  keywords = [
    "auth",
    "authentication",
    "authorization",
    "jwt",
    "mfa",
    "oauth",
    "rest-api",
    "sdk",
  ]
  license = "MIT"
  name = "authframework"
  readme = "README.md"
  requires-python = ">=3.9"
  version = "1.0.0"

  [project.optional-dependencies]
    dev = [
      "black>=23.0.0",
      "flake8>=6.0.0",
      "isort>=5.12.0",
      "mypy>=1.5.0",
      "pre-commit>=3.4.0",
      "pytest-asyncio>=0.21.0",
      "pytest-cov>=4.0.0",
      "pytest>=7.0.0",
      "respx>=0.21.0",
    ]
    docs = [
      "sphinx-autodoc-typehints>=1.24.0",
      "sphinx-rtd-theme>=1.3.0",
      "sphinx>=7.0.0",
    ]
    fastapi = ["fastapi>=0.68.0"]
    flask = ["flask>=2.0.0"]

  [project.urls]
    Documentation = "https://github.com/cires/AuthFramework/tree/main/sdks/python"
    Homepage      = "https://github.com/cires/AuthFramework"
    Issues        = "https://github.com/cires/AuthFramework/issues"
    Repository    = "https://github.com/cires/AuthFramework.git"

[tool.hatch.build.targets.wheel]
  packages = ["src/authframework"]

[tool.hatch.build.targets.sdist]
  include = ["/LICENSE", "/README.md", "/src", "/tests"]

[tool.black]
  extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
  include = '\.pyi?$'
  line-length = 100
  target-version = ['py39']

[tool.isort]
  ensure_newline_before_comments = true
  force_grid_wrap                = 0
  include_trailing_comma         = true
  line_length                    = 100
  multi_line_output              = 3
  profile                        = "black"
  use_parentheses                = true

[tool.mypy]
  check_untyped_defs          = true
  disallow_incomplete_defs    = true
  disallow_untyped_decorators = true
  disallow_untyped_defs       = true
  no_implicit_optional        = true
  python_version              = "3.9"
  strict_equality             = true
  warn_no_return              = true
  warn_redundant_casts        = true
  warn_return_any             = true
  warn_unreachable            = true
  warn_unused_configs         = true
  warn_unused_ignores         = true

[tool.pytest.ini_options]
  addopts = [
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov=authframework",
    "--strict-config",
    "--strict-markers",
  ]
  asyncio_mode = "auto"
  markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
    "unit: marks tests as unit tests",
  ]
  python_classes = ["Test*"]
  python_files = ["test_*.py"]
  python_functions = ["test_*"]
  testpaths = ["tests"]

[tool.coverage.run]
  omit   = ["*/test_*", "*/tests/*"]
  source = ["src/authframework"]

[tool.coverage.report]
  exclude_lines = [
    "@(abc\\.)?abstractmethod",
    "class .*\\bProtocol\\):",
    "def __repr__",
    "if 0:",
    "if __name__ == .__main__.:",
    "if self.debug:",
    "if settings.DEBUG",
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
  ]

[dependency-groups]
  dev = ["pytest-asyncio>=1.2.0", "respx>=0.22.0"]
